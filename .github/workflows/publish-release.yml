name: Publish Release Draft

# The code (like generate-release-body) will be taken from the tag version, not master
on:
  workflow_dispatch:
    inputs:
      tag:
        description: tag (ex. v0.8.3) to generate release note and srtool runtimes from
        required: true

jobs:
  ####### Building binaries #######

  build-binary:
    runs-on: self-hosted
    env:
      CARGO_SCCACHE_VERSION: 0.2.14-alpha.0-parity
      RUSTFLAGS: "-C opt-level=3"
    outputs:
      RUSTC: ${{ steps.get-rust-versions.outputs.rustc }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}
      - uses: actions/cache@v2
        with:
          path: ${{ runner.tool_cache }}/cargo-sccache
          key: ${{ runner.OS }}-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}-v1

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show
      - name: SCCache
        run: |
          if [ ! -f ${{ runner.tool_cache }}/cargo-sccache/bin/sccache ]; then
            cargo install sccache --git https://github.com/paritytech/sccache.git --no-default-features --features=dist-client --root ${{ runner.tool_cache }}/cargo-sccache
          fi
          if [[ -z `pgrep sccache` ]]; then
            chmod +x ${{ runner.tool_cache }}/cargo-sccache/bin/sccache
            ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
          fi
          ${{ runner.tool_cache }}/cargo-sccache/bin/sccache -s
          echo "RUSTC_WRAPPER=${{ runner.tool_cache }}/cargo-sccache/bin/sccache" >> $GITHUB_ENV
      - id: get-rust-versions
        run: |
          echo "::set-output name=rustc::$(rustc --version)"
      - name: Build Node
        run: cargo build --release --all
      - name: Save parachain binary
        run: |
          mkdir -p build
          cp target/release/moonbeam build/moonbeam;
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: moonbeam
          path: build

  ####### Build runtimes with srtool #######

  build-srtool-runtimes:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chain: ["moonbase", "moonshadow", "moonriver", "moonbeam"]
    steps:
      - name: Get Timestamp
        run: echo "TMSP=$(date '+%Y%m%d_%H%M%S')" >> $GITHUB_ENV
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}
      - name: Srtool build
        id: srtool_build
        uses: chevdor/srtool-actions@v0.1.0
        with:
          chain: ${{ matrix.chain }}
          tag: 1.53.0-rc2
      - name: Summary
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq . > ${{ matrix.chain }}-srtool-digest.json
          cat ${{ matrix.chain }}-srtool-digest.json
          cp ${{ steps.srtool_build.outputs.wasm }} ${{ matrix.chain }}-runtime.compact.wasm
      - name: Archive Artifacts for ${{ matrix.chain }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.chain }}-runtime
          path: |
            ${{ matrix.chain }}-runtime.compact.wasm
            ${{ matrix.chain }}-srtool-digest.json

  ####### Prepare the release draft #######

  publish-draft-release:
    runs-on: ubuntu-latest
    needs: ["build-binary", "build-srtool-runtimes"]
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Download moonbase runtime
        uses: actions/download-artifact@v2
        with:
          name: moonbase-runtime
          path: build
      - name: Download moonshadow runtime
        uses: actions/download-artifact@v2
        with:
          name: moonshadow-runtime
          path: build
      - name: Download moonriver runtime
        uses: actions/download-artifact@v2
        with:
          name: moonriver-runtime
          path: build
      - name: Download moonbeam runtime
        uses: actions/download-artifact@v2
        with:
          name: moonbeam-runtime
          path: build
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Generate release body
        id: generate-release-body
        run: |
          cd tools
          yarn
          yarn -s run ts-node github/generate-release-body.ts --srtool-report-folder '../build/' > ../body.md
      - name: Get runtime version
        id: get-runtime-ver
        run: |
          runtime_moonbase_ver="$(cat ./runtime/moonbase/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"

          echo "::set-output name=runtime_moonbase_ver::$runtime_moonbase_ver"
          mv build/moonbase-runtime.compact.wasm moonbase-runtime-${runtime_moonbase_ver}.wasm
          mv build/moonbase-srtool-digest.json moonbase-runtime-${runtime_moonbase_ver}-srtool-digest.json
          runtime_moonshadow_ver="$(cat ./runtime/moonshadow/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"

          echo "::set-output name=runtime_moonshadow_ver::$runtime_moonshadow_ver"
          mv build/moonshadow-runtime.compact.wasm moonshadow-runtime-${runtime_moonshadow_ver}.wasm
          mv build/moonshadow-srtool-digest.json moonshadow-runtime-${runtime_moonshadow_ver}-srtool-digest.json
          runtime_moonriver_ver="$(cat ./runtime/moonriver/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"

          echo "::set-output name=runtime_moonriver_ver::$runtime_moonriver_ver"
          mv build/moonriver-runtime.compact.wasm moonriver-runtime-${runtime_moonriver_ver}.wasm
          mv build/moonriver-srtool-digest.json moonriver-runtime-${runtime_moonriver_ver}-srtool-digest.json
          runtime_moonbeam_ver="$(cat ./runtime/moonbeam/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"

          echo "::set-output name=runtime_moonbeam_ver::$runtime_moonbeam_ver"
          mv build/moonbeam-runtime.compact.wasm moonbeam-runtime-${runtime_moonbeam_ver}.wasm
          mv build/moonbeam-srtool-digest.json moonbeam-runtime-${runtime_moonbeam_ver}-srtool-digest.json

      - name: Create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Moonbase ${{ github.event.inputs.tag }}
          body_path: body.md
          draft: true
      - name: Upload moonbase wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonbase-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbase_ver }}.wasm
          asset_name: moonbase-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbase_ver }}.wasm
          asset_content_type: application/octet-stream
      - name: Upload moonbase srtool digest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonbase-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbase_ver }}-srtool-digest.json
          asset_name: moonbase-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbase_ver }}.srtool-digest.json
          asset_content_type: application/json
      - name: Upload moonshadow wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonshadow-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonshadow_ver }}.wasm
          asset_name: moonshadow-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonshadow_ver }}.wasm
          asset_content_type: application/octet-stream
      - name: Upload moonshadow srtool digest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonshadow-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonshadow_ver }}-srtool-digest.json
          asset_name: moonshadow-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonshadow_ver }}.srtool-digest.json
          asset_content_type: application/json
      - name: Upload moonriver wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonriver-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonriver_ver }}.wasm
          asset_name: moonriver-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonriver_ver }}.wasm
          asset_content_type: application/octet-stream
      - name: Upload moonriver srtool digest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonriver-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonriver_ver }}-srtool-digest.json
          asset_name: moonriver-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonriver_ver }}.srtool-digest.json
          asset_content_type: application/json
      - name: Upload moonbeam wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonbeam-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbeam_ver }}.wasm
          asset_name: moonbeam-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbeam_ver }}.wasm
          asset_content_type: application/octet-stream
      - name: Upload moonbeam srtool digest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonbeam-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbeam_ver }}-srtool-digest.json
          asset_name: moonbeam-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbeam_ver }}.srtool-digest.json
          asset_content_type: application/json
      - name: Upload moonbeam
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: build/moonbeam
          asset_name: moonbeam
          asset_content_type: application/octet-stream
