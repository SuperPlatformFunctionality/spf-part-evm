name: Release

# Using a single file workflow is the preferred solution for our CI over workflow_runs.
# 1. It generates only 1 action item in the list making it more readable
# 2. It includes the PR/Commit text in the action item
# 3. Artifacts are not available between workflows.

# This is only allowing pushes on the moonbeam repo for pull requests.
####### DO NOT CHANGE THIS !! #######
on:
  push:
  workflow_dispatch:

jobs:
  ####### Check files and formatting #######

  check-copyright:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Find un-copyrighted files
        run: |
          find . -name '*.rs' -exec grep  -H -E -o -c Copyright {} \; | grep ':0' || true
          FILECOUNT=$(find . -name '*.rs' -exec grep  -H -E -o -c  'Copyright'  {} \; | grep -c ':0' || true)
          if [[ $FILECOUNT -eq 0 ]]; then
            true
          else
            false
          fi

  set-tags:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check-tag.outputs.is_release }}
    steps:
      # Determine whether this is a release based on the git tags that are applied.
      # Some other CI tasks check this and only run on releases.
      - name: Check Tag
        id: check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo ::set-output name=is_release::true
            echo "is_release: true"
          fi

  check-links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"

  check-editorconfig:
    name: "Check editorconfig"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup editorconfig checker
        run: |
          ls /tmp/bin/ec-linux-amd64 || \
          cd /tmp && \
          wget https://github.com/editorconfig-checker/editorconfig-checker/releases/download/2.1.0/ec-linux-amd64.tar.gz && \
          tar xvf ec-linux-amd64.tar.gz && \
          chmod +x bin/ec-linux-amd64
      - name: Check files
        run: /tmp/bin/ec-linux-amd64

  check-prettier:
    name: "Check with Prettier"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Check with Prettier
        run: npx prettier --check --ignore-path .gitignore '**/*.(yml|js|ts|json)'

  ####### Building and Testing binaries #######

  build:
    runs-on: self-hosted
    env:
      CARGO_SCCACHE_VERSION: 0.2.14-alpha.0-parity
      RUSTFLAGS: "-C opt-level=3"
      # MOONBEAM_LOG: info
      # DEBUG: "test*"
    outputs:
      RUSTC: ${{ steps.get-rust-versions.outputs.rustc }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ runner.tool_cache }}/cargo-sccache
          key: ${{ runner.OS }}-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}-v1

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show
      - name: SCCache
        run: |
          if [ ! -f ${{ runner.tool_cache }}/cargo-sccache/bin/sccache ]; then
            cargo install sccache --git https://github.com/paritytech/sccache.git --no-default-features --features=dist-client --root ${{ runner.tool_cache }}/cargo-sccache
          fi
          if [[ -z `pgrep sccache` ]]; then
            chmod +x ${{ runner.tool_cache }}/cargo-sccache/bin/sccache
            ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
          fi
          ${{ runner.tool_cache }}/cargo-sccache/bin/sccache -s
          echo "RUSTC_WRAPPER=${{ runner.tool_cache }}/cargo-sccache/bin/sccache" >> $GITHUB_ENV
      - id: get-rust-versions
        run: |
          echo "::set-output name=rustc::$(rustc --version)"
      - name: Build Node
        run: cargo build --release --all
      - name: Unit tests
        run: cargo test --release --all
      - name: Format code with rustfmt
        run: cargo fmt -- --check

      # We determine whether there are unmodified Cargo.lock files by:
      # 1. Asking git for a list of all modified files
      # 2. Using grep to reduce the list to only Cargo.lock files
      # 3. Counting the number of lines of output
      - name: Check Cargo Toml
        run: |
          # Make sure git is working, and if not abort early. When git is not working it looks like:
          # $ git diff-index --name-only HEAD
          # fatal: not a git repository (or any of the parent directories): .git
          DIFF_INDEX=$(git diff-index --name-only HEAD)
          if [[ ${DIFF_INDEX:0:5} == "fatal" ]]; then
            echo "There was an error with the git checkout. Can't check Cargo.lock file."
            false
          fi

          FILECOUNT=$(echo $DIFF_INDEX | grep Cargo.lock | wc -l)
          if [[ $FILECOUNT -eq 0 ]]; then
            echo "All lock files are valid"
          else
            echo "The following Cargo.lock files have uncommitted changes"
            echo $DIFF_INDEX | grep Cargo.lock
            false
          fi
      - name: Check with Clippy
        run: cargo clippy --release --workspace
      - name: Ensure benchmarking compiles
        run: cargo check --release --features=runtime-benchmarks
      - name: Save parachain binary
        run: |
          mkdir -p build
          cp target/release/moonbeam build/moonbeam;
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: moonbeam
          path: build

  typescript-tests:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Typescript integration tests (against dev service)
        env:
          BINARY_PATH: ../build/moonbeam
        run: |
          chmod uog+x build/moonbeam
          cd moonbeam-types-bundle
          npm install
          cd ../tests
          npm install
          node_modules/.bin/mocha --parallel -j 7 -r ts-node/register 'tests/**/test-*.ts'

  ####### Prepare and Deploy Docker images #######

  generate-parachain-specs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: ["build", "typescript-tests"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Make moonbeam executable
        run: |
          chmod uog+x build/moonbeam
      - name: Generate specs
        run: |
          MOONBEAM_BINARY=build/moonbeam scripts/generate-parachain-specs.sh
      - name: Generate runtimes
        run: |
          MOONBEAM_BINARY=build/moonbeam scripts/generate-runtimes.sh
      - name: Upload parachain specs
        uses: actions/upload-artifact@v2
        with:
          name: moonbeam
          path: build

  docker-parachain:
    runs-on: ubuntu-latest
    needs: ["build", "generate-parachain-specs"]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=purestake/moonbase-parachain
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push parachain
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/moonbase-parachain.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

  docker-moonbeam:
    runs-on: ubuntu-latest
    needs: ["build", "generate-parachain-specs"]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=purestake/moonbeam
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push moonbeam
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/moonbeam.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

  ####### Prepare the release draft #######

  build-srtool-runtimes:
    runs-on: self-hosted
    needs: ["set-tags"]
    if: needs.set-tags.outputs.is_release == 'true'
    strategy:
      matrix:
        runtime: ["moonbase", "moonshadow", "moonriver", "moonbeam"]
    container:
      image: paritytech/srtool:nightly-2021-03-15
      volumes:
        - ${{ github.workspace }}:/build
      env:
        PACKAGE: ${{ matrix.runtime }}-runtime
    steps:
      - uses: actions/checkout@v2
      - name: Cache target dir
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/runtime/${{ matrix.runtime }}/target"
          key: srtool-target-${{ matrix.runtime }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.runtime }}-
            srtool-target-
      - name: Build ${{ matrix.runtime }} runtime
        id: build-runtime
        shell: bash
        env:
          srtool_output_filename: ${{ matrix.runtime }}_srtool_output.json
        run: |
          cd /build
          build --json | tee $srtool_output_filename
          cat $srtool_output_filename
          while IFS= read -r line; do
            echo "::set-output name=$line::$(jq -r ".$line" < $srtool_output_filename)"
          done <<< "$(jq -r 'keys[]' < $srtool_output_filename)"
      - name: Upload ${{ matrix.runtime }} srtool json
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-srtool-json
          path: ${{ matrix.runtime }}_srtool_output.json
      - name: Upload ${{ matrix.runtime }} runtime
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
          path: "${{ steps.build-runtime.outputs.wasm }}"

  publish-draft-release:
    runs-on: ubuntu-latest
    needs:
      ["set-tags", "build", "generate-parachain-specs", "build-srtool-runtimes"]
    if: needs.set-tags.outputs.is_release == 'true'
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbeam
          path: build
      - name: Download moonbase srtool json output
        uses: actions/download-artifact@v2
        with:
          name: moonbase-srtool-json
      - name: Download moonbase runtime
        uses: actions/download-artifact@v2
        with:
          name: moonbase-runtime
      - name: Download moonshadow srtool json output
        uses: actions/download-artifact@v2
        with:
          name: moonshadow-srtool-json
      - name: Download moonshadow runtime
        uses: actions/download-artifact@v2
        with:
          name: moonshadow-runtime
      - name: Download moonriver srtool json output
        uses: actions/download-artifact@v2
        with:
          name: moonriver-srtool-json
      - name: Download moonriver runtime
        uses: actions/download-artifact@v2
        with:
          name: moonriver-runtime
      - name: Download moonbeam srtool json output
        uses: actions/download-artifact@v2
        with:
          name: moonbeam-srtool-json
      - name: Download moonbeam runtime
        uses: actions/download-artifact@v2
        with:
          name: moonbeam-runtime
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Generate release body
        id: generate-release-body
        run: |
          cd tools
          npm install
          node_modules/.bin/ts-node github/generate-release-body.ts > ../body.md
      - name: Get runtime version
        id: get-runtime-ver
        run: |
          runtime_moonbase_ver="$(cat ./runtime/moonbase/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"
          echo "::set-output name=runtime_moonbase_ver::$runtime_moonbase_ver"
          mv moonbase_runtime.compact.wasm moonbase-runtime-${runtime_moonbase_ver}.wasm
          runtime_moonshadow_ver="$(cat ./runtime/moonshadow/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"
          echo "::set-output name=runtime_moonshadow_ver::$runtime_moonshadow_ver"
          mv moonshadow_runtime.compact.wasm moonshadow-runtime-${runtime_moonshadow_ver}.wasm
          runtime_moonriver_ver="$(cat ./runtime/moonriver/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"
          echo "::set-output name=runtime_moonriver_ver::$runtime_moonriver_ver"
          mv moonriver_runtime.compact.wasm moonriver-runtime-${runtime_moonriver_ver}.wasm
          runtime_moonbeam_ver="$(cat ./runtime/moonbeam/src/lib.rs | grep -o 'spec_version: [0-9]*' | tail -1 | grep -o '[0-9]*')"
          echo "::set-output name=runtime_moonbeam_ver::$runtime_moonbeam_ver"
          mv moonbeam_runtime.compact.wasm moonbeam-runtime-${runtime_moonbeam_ver}.wasm
      - name: Create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Moonbase ${{ github.ref }}
          body_path: body.md
          draft: true
      - name: Upload moonbase wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonbase-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbase_ver }}.wasm
          asset_name: moonbase-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbase_ver }}.wasm
          asset_content_type: application/octet-stream
      - name: Upload moonshadow wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonshadow-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonshadow_ver }}.wasm
          asset_name: moonshadow-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonshadow_ver }}.wasm
          asset_content_type: application/octet-stream
      - name: Upload moonriver wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonriver-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonriver_ver }}.wasm
          asset_name: moonriver-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonriver_ver }}.wasm
          asset_content_type: application/octet-stream
      - name: Upload moonbeam wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: moonbeam-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbeam_ver }}.wasm
          asset_name: moonbeam-runtime-${{ steps.get-runtime-ver.outputs.runtime_moonbeam_ver }}.wasm
          asset_content_type: application/octet-stream

      - name: Upload moonbeam
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: build/moonbeam
          asset_name: moonbeam
          asset_content_type: application/octet-stream
