name: Release

on:
  push:
    tags:
      - v**.**.**

env:
  WASM_BUILD_TOOLCHAIN: nightly-2020-07-20

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      RUSTC: ${{ steps.get-rust-versions.outputs.rustc }}
    steps:
    - uses: actions/checkout@v2
    - name: Submodules
      run: git submodule update --init --recursive
    - name: Cache Rust dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          vendor
        key: ${{ runner.OS }}-build-${{ env.WASM_BUILD_TOOLCHAIN }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.OS }}-build--${{ env.WASM_BUILD_TOOLCHAIN }}
    - uses: actions-rs/toolchain@v1
      with:
        target: wasm32-unknown-unknown
        toolchain: ${{ env.WASM_BUILD_TOOLCHAIN }}
        default: true
    - id: get-rust-versions
      run: |
        echo "::set-output name=rustc::$(rustc --version)"
    - name: Build
      run: cargo build --release --verbose --all
    - name: Save parachain binary
      run: |
        mkdir -p build/alphanet
        cp target/release/moonbase-alphanet build/alphanet/moonbase-alphanet;
    - name: Upload moonbase-alphanet node
      uses: actions/upload-artifact@v2
      with:
        name: moonbase-alphanet
        path: build/alphanet


  generate-specs:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: moonbase-alphanet
        path: build/alphanet

    - name: Generate specs
      run: |
        chmod uog+x build/alphanet/moonbase-alphanet
        PARACHAIN_BINARY=build/alphanet/moonbase-alphanet scripts/generate-parachain-specs.sh

    - name: Upload parachain spec plain
      uses: actions/upload-artifact@v2
      with:
        name: moonbase-alphanet
        path: build/alphanet

  publish-draft-release:
    runs-on: ubuntu-latest
    needs: ['build', 'generate-specs']
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: moonbeam

    - name: Set up Ruby 2.7
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7
        
    - name: Generate release text
      env:
        RUSTC: ${{ needs.build.outputs.rustc }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gem install changelogerator git toml
        ruby $GITHUB_WORKSPACE/moonbeam/scripts/github/generate_release_text.rb | tee release_text.md

    - name: Create draft release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Moonbase Alphanet ${{ github.ref }}
        body_path: ./release_text.md
        draft: true


  publish-runtimes:
    runs-on: ubuntu-latest
    needs: ['publish-draft-release']
    strategy:
      matrix:
        runtime: ['moonbase-alphanet']
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: moonbase-alphanet
          path: build/alphanet

      - name: Set up Ruby 2.7
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: Get runtime version
        id: get-runtime-ver
        run: |
          runtime_ver="$(ruby -e 'require "./scripts/github/lib.rb"; puts get_runtime("${{ matrix.runtime }}")')"
          echo "::set-output name=runtime_ver::$runtime_ver"

      - name: Upload ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-runtime.wasm
          asset_name: ${{ matrix.runtime }}-runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.wasm
          asset_content_type: application/wasm

      - name: Upload ${{ matrix.runtime }} node
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}
          asset_name: ${{ matrix.runtime }}
          asset_content_type: application/octet-stream 

      - name: Upload ${{ matrix.runtime }} specs plain
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-specs-plain.json
          asset_name: ${{ matrix.runtime }}-specs-plain.json
          asset_content_type: application/json 

      - name: Upload ${{ matrix.runtime }} specs raw
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-specs-raw.json
          asset_name: ${{ matrix.runtime }}-specs-raw.json
          asset_content_type: application/json 

      - name: Upload ${{ matrix.runtime }} genesis
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-genesis.txt
          asset_name: ${{ matrix.runtime }}-genesis.txt
          asset_content_type: text/plain 